"""
Comandos relacionados con rese√±as
"""

import nextcord
from nextcord.ext import commands

from config import *
from utils import log, is_staff, log_accion, db_execute, db_query_one, db_query_all
from i18n import t, get_user_lang

class ReviewCommands(commands.Cog):
    """Comandos relacionados con rese√±as"""
    
    def __init__(self, bot: commands.Bot):
        self.bot = bot
    
    @nextcord.slash_command(name="rese√±a", description="Dejar una rese√±a")
    async def rese√±a(self, interaction: nextcord.Interaction):
        """Dejar una rese√±a del servicio"""
        try:
            # Crear modal para la rese√±a
            modal = Rese√±aModal()
            await interaction.response.send_modal(modal)
            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå Error creando rese√±a: {str(e)}", ephemeral=True)
            log.error(f"Error en rese√±a: {e}")
    
    @nextcord.slash_command(name="rese√±a_aprobar", description="Aprobar una rese√±a (solo staff)")
    async def rese√±a_aprobar(self, interaction: nextcord.Interaction, rese√±a_id: int):
        """Aprobar una rese√±a pendiente"""
        if not is_staff(interaction.user):
            await interaction.response.send_message("‚ùå Solo el staff puede usar este comando.", ephemeral=True)
            return
        
        try:
            # Buscar la rese√±a en la base de datos
            rese√±a = await db_query_one(
                "SELECT * FROM reviews WHERE id = ? AND status = 'pending'",
                (rese√±a_id,)
            )
            
            if not rese√±a:
                await interaction.response.send_message("‚ùå No se encontr√≥ una rese√±a pendiente con ese ID.", ephemeral=True)
                return
            
            # Aprobar la rese√±a
            await db_execute(
                "UPDATE reviews SET status = 'approved', approved_by = ?, approved_at = CURRENT_TIMESTAMP WHERE id = ?",
                (interaction.user.id, rese√±a_id)
            )
            
            # Crear embed de confirmaci√≥n
            embed = nextcord.Embed(
                title="‚úÖ Rese√±a Aprobada",
                color=nextcord.Color.green(),
                timestamp=nextcord.utils.utcnow()
            )
            
            embed.add_field(name="üìù **Rese√±a ID**", value=str(rese√±a_id), inline=True)
            embed.add_field(name="üëÆ **Aprobada por**", value=interaction.user.mention, inline=True)
            embed.add_field(name="‚≠ê **Calificaci√≥n**", value="‚≠ê" * rese√±a[3], inline=True)
            
            embed.set_footer(text=f"{BRAND_NAME} ‚Ä¢ Sistema de Rese√±as")
            
            await interaction.response.send_message(embed=embed)
            
            # Log de la acci√≥n
            await log_accion("Rese√±a Aprobada", interaction.user.display_name, f"ID: {rese√±a_id}")
            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå Error aprobando rese√±a: {str(e)}", ephemeral=True)
            log.error(f"Error en rese√±a_aprobar: {e}")

class Rese√±aModal(nextcord.ui.Modal):
    def __init__(self):
        super().__init__(title="Dejar una Rese√±a")
        
        self.calificacion = nextcord.ui.TextInput(
            label="Calificaci√≥n (1-5)",
            placeholder="5",
            required=True,
            max_length=1
        )
        self.add_item(self.calificacion)
        
        self.comentario = nextcord.ui.TextInput(
            label="Comentario",
            placeholder="Cu√©ntanos tu experiencia...",
            style=nextcord.TextInputStyle.paragraph,
            required=True,
            max_length=1000
        )
        self.add_item(self.comentario)
    
    async def callback(self, interaction: nextcord.Interaction):
        try:
            # Validar calificaci√≥n
            try:
                calificacion = int(self.calificacion.value)
                if calificacion < 1 or calificacion > 5:
                    raise ValueError()
            except ValueError:
                await interaction.response.send_message("‚ùå La calificaci√≥n debe ser un n√∫mero entre 1 y 5.", ephemeral=True)
                return
            
            # Guardar rese√±a en la base de datos
            await db_execute(
                "INSERT INTO reviews (user_id, username, rating, comment, status, created_at) VALUES (?, ?, ?, ?, 'pending', CURRENT_TIMESTAMP)",
                (interaction.user.id, interaction.user.display_name, calificacion, self.comentario.value)
            )
            
            # Crear embed de confirmaci√≥n
            embed = nextcord.Embed(
                title="‚≠ê Rese√±a Enviada",
                description="¬°Gracias por tu rese√±a! Ser√° revisada por nuestro equipo.",
                color=nextcord.Color.gold(),
                timestamp=nextcord.utils.utcnow()
            )
            
            embed.add_field(name="‚≠ê **Calificaci√≥n**", value="‚≠ê" * calificacion, inline=True)
            embed.add_field(name="üìù **Comentario**", value=self.comentario.value[:100] + "..." if len(self.comentario.value) > 100 else self.comentario.value, inline=False)
            
            embed.set_footer(text=f"{BRAND_NAME} ‚Ä¢ Sistema de Rese√±as")
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
            # Log de la acci√≥n
            await log_accion("Rese√±a Enviada", interaction.user.display_name, f"Calificaci√≥n: {calificacion}")
            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå Error enviando rese√±a: {str(e)}", ephemeral=True)
            log.error(f"Error en Rese√±aModal: {e}")

def setup(bot: commands.Bot):
    """Setup del cog"""
    bot.add_cog(ReviewCommands(bot))