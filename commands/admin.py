"""
Comandos de administraci√≥n del bot ONZA
"""

import asyncio
from typing import Optional
from datetime import datetime, timezone

import nextcord
from nextcord.ext import commands

from config import *
from utils import log, is_staff, log_accion

class AdminCommands(commands.Cog):
    """Comandos de administraci√≥n para staff"""
    
    def __init__(self, bot: commands.Bot):
        self.bot = bot
    
    @nextcord.slash_command(name="sync_commands", description="Sincronizar comandos slash (solo admin)", guild_ids=[GUILD_ID] if GUILD_ID else None)
    async def sync_commands(self, interaction: nextcord.Interaction):
            """Forzar sincronizaci√≥n de comandos slash"""
            if not is_staff(interaction.user):
                await interaction.response.send_message("‚ùå Solo el staff puede usar este comando.", ephemeral=True)
                return
            
            try:
                await interaction.response.defer(ephemeral=True)
                await self.bot.sync_all_application_commands()
                await interaction.followup.send("‚úÖ Comandos sincronizados correctamente.", ephemeral=True)
                
                # Log de la acci√≥n
                await log_accion("Sincronizaci√≥n de Comandos", interaction.user.display_name, "Comandos sincronizados manualmente")
                
            except Exception as e:
                await interaction.followup.send(f"‚ùå Error sincronizando comandos: {str(e)}", ephemeral=True)
                log.error(f"Error en sync_commands: {e}")
    
    @nextcord.slash_command(name="diagnostico", description="Diagn√≥stico del bot (solo admin)", guild_ids=[GUILD_ID] if GUILD_ID else None)
    async def diagnostico(self, interaction: nextcord.Interaction):
        """Mostrar diagn√≥stico del bot"""
        if not is_staff(interaction.user):
            await interaction.response.send_message("‚ùå Solo el staff puede usar este comando.", ephemeral=True)
            return
        
        try:
            await interaction.response.defer(ephemeral=True)
            
            # Crear embed de diagn√≥stico
            embed = nextcord.Embed(
                title="üîß Diagn√≥stico del Bot",
                color=nextcord.Color.blue(),
                timestamp=nextcord.utils.utcnow()
            )
            
            # Informaci√≥n del bot
            embed.add_field(
                name="ü§ñ **Bot**",
                value=f"‚Ä¢ **Nombre:** {self.bot.user.name}\n‚Ä¢ **ID:** {self.bot.user.id}\n‚Ä¢ **Servidores:** {len(self.bot.guilds)}",
                inline=False
            )
            
            # Informaci√≥n del servidor
            if interaction.guild:
                embed.add_field(
                    name="üè† **Servidor**",
                    value=f"‚Ä¢ **Nombre:** {interaction.guild.name}\n‚Ä¢ **ID:** {interaction.guild.id}\n‚Ä¢ **Miembros:** {interaction.guild.member_count}",
                    inline=False
                )
            
            # Comandos registrados
            commands_count = len(list(self.bot.get_application_commands()))
            embed.add_field(
                name="‚öôÔ∏è **Comandos**",
                value=f"‚Ä¢ **Total:** {commands_count}\n‚Ä¢ **Estado:** {'‚úÖ Activos' if commands_count > 0 else '‚ùå Sin comandos'}",
                inline=False
            )
            
            # Estado de conexi√≥n
            embed.add_field(
                name="üåê **Conexi√≥n**",
                value=f"‚Ä¢ **Estado:** {'‚úÖ Conectado' if self.bot.is_ready() else '‚ùå Desconectado'}\n‚Ä¢ **Latencia:** {round(self.bot.latency * 1000)}ms",
                inline=False
            )
            
            embed.set_footer(text=f"{BRAND_NAME} ‚Ä¢ Sistema de Diagn√≥stico")
            
            await interaction.followup.send(embed=embed, ephemeral=True)
            
            # Log de la acci√≥n
            await log_accion("Diagn√≥stico", interaction.user.display_name, "Diagn√≥stico ejecutado")
            
        except Exception as e:
            await interaction.followup.send(f"‚ùå Error en diagn√≥stico: {str(e)}", ephemeral=True)
            log.error(f"Error en diagnostico: {e}")
    
    @nextcord.slash_command(name="reiniciar_bot", description="Reiniciar el bot (solo admin)", guild_ids=[GUILD_ID] if GUILD_ID else None)
    async def reiniciar_bot(self, interaction: nextcord.Interaction):
        """Reiniciar el bot (solo para administradores)"""
        if not is_staff(interaction.user):
            await interaction.response.send_message("‚ùå Solo el staff puede usar este comando.", ephemeral=True)
            return
        
        try:
            await interaction.response.send_message("üîÑ Reiniciando bot...", ephemeral=True)
            
            # Log de la acci√≥n
            await log_accion("Reinicio del Bot", interaction.user.display_name, "Bot reiniciado por comando")
            
            # Cerrar el bot
            await self.bot.close()
            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå Error reiniciando bot: {str(e)}", ephemeral=True)
            log.error(f"Error en reiniciar_bot: {e}")