"""
Comandos de usuario del bot ONZA
"""

import nextcord
from nextcord.ext import commands

from config import *
from utils import log, is_staff, log_accion
from i18n import t, get_user_lang

class UserCommands(commands.Cog):
    """Comandos disponibles para todos los usuarios"""
    
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self._register_commands()
    
    def _register_commands(self):
        """Registrar comandos de usuario"""
        
        @self.bot.slash_command(name="help", description="Ver comandos disponibles", guild_ids=[GUILD_ID] if GUILD_ID else None)
        async def help_command(interaction: nextcord.Interaction):
            """Comando de ayuda para usuarios"""
            lang = await get_user_lang(interaction.user.id)
            
            if is_staff(interaction.user):
                # Ayuda para staff
                embed = nextcord.Embed(
                    title="ü§ñ **Comandos de Staff**",
                    description="Comandos disponibles para el staff:",
                    color=0x00E5A8,
                    timestamp=nextcord.utils.utcnow()
                )
                
                embed.add_field(
                    name="üì¢ **Publicaci√≥n**",
                    value="`/publicar_bot` - Publicar mensaje personalizado\n`/servicios` - Publicar mensaje de servicios\n`/publicar_metodos_pago` - Publicar m√©todos de pago visible para todos\n`/actualizar_canales` - Actualizar canales autom√°ticamente",
                    inline=False
                )
                
                embed.add_field(
                    name="‚öôÔ∏è **Administraci√≥n**",
                    value="`/actualizar_canales` - Actualizar canales autom√°ticamente\n`/canal_id` - Obtener ID de un canal\n`/limpiar` - Limpiar mensajes del canal\n`/sync_commands` - Sincronizar comandos slash\n`/diagnostico` - Diagnosticar estado del bot\n`/reiniciar_render` - Informaci√≥n para reiniciar Render",
                    inline=False
                )
                
                embed.add_field(
                    name="üî® **Moderaci√≥n**",
                    value="`/banear` - Banear un usuario del servidor",
                    inline=False
                )
                
                embed.add_field(
                    name="üìä **Rese√±as**",
                    value="`/rese√±a_aprobar` - Aprobar rese√±as de usuarios",
                    inline=False
                )
                
                embed.set_footer(text="ONZA Bot ‚Ä¢ Comandos de Staff")
                
            else:
                # Ayuda para usuarios normales
                embed = nextcord.Embed(
                    title="ü§ñ **Comandos de Usuario**",
                    description="Comandos disponibles para todos:",
                    color=0x5865F2,
                    timestamp=nextcord.utils.utcnow()
                )
                
                embed.add_field(
                    name="üé´ **Tickets**",
                    value="Ve al canal #abrir-ticket y usa el panel de tickets publicado",
                    inline=False
                )
                
                embed.add_field(
                    name="‚ùì **Informaci√≥n**",
                    value="`/metodos_pago` - Ver m√©todos de pago disponibles\n`/pagos` - Ver m√©todos de pago\n`/garantia` - Ver t√©rminos de garant√≠a",
                    inline=False
                )
                
                embed.add_field(
                    name="‚≠ê **Rese√±as**",
                    value="`/rese√±a [rating] [comentario]` - Dejar rese√±a",
                    inline=False
                )
                
                embed.set_footer(text="ONZA Bot ‚Ä¢ Comandos de Usuario")
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
            # Log de la acci√≥n
            await log_accion("Help Consultado", interaction.user.display_name, f"Staff: {is_staff(interaction.user)}")
        
        @self.bot.slash_command(name="metodos_pago", description="Ver m√©todos de pago disponibles", guild_ids=[GUILD_ID] if GUILD_ID else None)
        async def metodos_pago(interaction: nextcord.Interaction):
            """Mostrar m√©todos de pago disponibles"""
            try:
                embed = nextcord.Embed(
                    title="üí≥ **M√©todos de Pago**",
                    description="Aceptamos los siguientes m√©todos de pago:",
                    color=0x00E5A8,
                    timestamp=nextcord.utils.utcnow()
                )
                
                embed.add_field(
                    name="ü™ô **Crypto**",
                    value="‚Ä¢ Bitcoin (BTC)\n‚Ä¢ Ethereum (ETH)\n‚Ä¢ USDT (TRC20/ERC20)",
                    inline=True
                )
                
                embed.add_field(
                    name="üí≥ **PayPal**",
                    value="‚Ä¢ Transferencia directa\n‚Ä¢ Pago seguro",
                    inline=True
                )
                
                embed.add_field(
                    name="üè¶ **Transferencia**",
                    value="‚Ä¢ SPEI\n‚Ä¢ OXXO\n‚Ä¢ Transferencia bancaria",
                    inline=True
                )
                
                embed.add_field(
                    name="‚ÑπÔ∏è **Informaci√≥n**",
                    value="‚Ä¢ Todos los precios est√°n en **MXN**\n‚Ä¢ Los pagos se procesan de forma segura\n‚Ä¢ Recibir√°s confirmaci√≥n en tu ticket",
                    inline=False
                )
                
                embed.set_footer(text=f"{BRAND_NAME} ‚Ä¢ M√©todos de Pago")
                
                await interaction.response.send_message(embed=embed, ephemeral=True)
                
                # Log de la acci√≥n
                await log_accion("M√©todos de Pago Consultados", interaction.user.display_name)
                
            except Exception as e:
                await interaction.response.send_message("‚ùå Error mostrando m√©todos de pago.", ephemeral=True)
                log.error(f"Error en metodos_pago: {e}")
        
        @self.bot.slash_command(name="pagos", description="Ver m√©todos de pago disponibles", guild_ids=[GUILD_ID] if GUILD_ID else None)
        async def pagos(interaction: nextcord.Interaction):
            """Mostrar m√©todos de pago (alias de metodos_pago)"""
            # Redirigir al comando metodos_pago
            await metodos_pago(interaction)
        
        @self.bot.slash_command(name="garantia", description="Ver t√©rminos de garant√≠a", guild_ids=[GUILD_ID] if GUILD_ID else None)
        async def garantia(interaction: nextcord.Interaction):
            """Mostrar t√©rminos de garant√≠a"""
            try:
                embed = nextcord.Embed(
                    title="üõ°Ô∏è **Garant√≠a ONZA**",
                    description="Nuestra garant√≠a te protege:",
                    color=0x00E5A8,
                    timestamp=nextcord.utils.utcnow()
                )
                
                embed.add_field(
                    name="‚úÖ **Verificaci√≥n Completa**",
                    value="Si ONZA no entrega el servicio prometido, verificamos el caso y procedemos con el reembolso.",
                    inline=False
                )
                
                embed.add_field(
                    name="üîÑ **Reembolso Garantizado**",
                    value="100% del dinero de vuelta si no se cumple con el servicio.",
                    inline=False
                )
                
                embed.add_field(
                    name="‚è∞ **Tiempo de Verificaci√≥n**",
                    value="24-48 horas para verificar y procesar reembolsos.",
                    inline=False
                )
                
                embed.add_field(
                    name="üîí **Seguridad Total**",
                    value="Tu informaci√≥n personal solo se maneja dentro del ticket privado.",
                    inline=False
                )
                
                embed.set_footer(text=f"{BRAND_NAME} ‚Ä¢ Garant√≠a de Calidad")
                
                await interaction.response.send_message(embed=embed, ephemeral=True)
                
                # Log de la acci√≥n
                await log_accion("Garant√≠a Consultada", interaction.user.display_name)
                
            except Exception as e:
                await interaction.response.send_message("‚ùå Error mostrando garant√≠a.", ephemeral=True)
                log.error(f"Error en garantia: {e}")
